"use strict";(self.webpackChunkfirst_example=self.webpackChunkfirst_example||[]).push([[33],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),g=a,m=c["".concat(p,".").concat(g)]||c[g]||u[g]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905)),o=n(933),i=n(9960);const s={sidebar_position:1},p="Example Spring Boot",l={unversionedId:"user-guide/getting-started/exampleSpringBoot",id:"user-guide/getting-started/exampleSpringBoot",title:"Example Spring Boot",description:"In the first 4 steps, we will set up KADAI REST API without security. Then, we will show how to use",source:"@site/docs/user-guide/getting-started/exampleSpringBoot.md",sourceDirName:"user-guide/getting-started",slug:"/user-guide/getting-started/exampleSpringBoot",permalink:"/taskana-doc/docs/user-guide/getting-started/exampleSpringBoot",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"userSidebar",previous:{title:"Getting Started",permalink:"/taskana-doc/docs/category/getting-started"},next:{title:"Supported Environments",permalink:"/taskana-doc/docs/user-guide/getting-started/supportedEnvironments"}},d={},u=[{value:"What you&#39;ll need",id:"what-youll-need",level:2},{value:"Set up KADAI REST-API without security",id:"set-up-kadai-rest-api-without-security",level:2},{value:"Step 1: Initialize an empty project",id:"step-1-initialize-an-empty-project",level:3},{value:"Step 2: Add dependencies",id:"step-2-add-dependencies",level:3},{value:"Step 3: Add properties configuration",id:"step-3-add-properties-configuration",level:3},{value:"Step 3a: Fill out application.properties",id:"step-3a-fill-out-applicationproperties",level:4},{value:"Step 3b: Add kadai.properties",id:"step-3b-add-kadaiproperties",level:4},{value:"Step 4: Add rest configuration",id:"step-4-add-rest-configuration",level:3},{value:"Step 5: Try out the REST-API",id:"step-5-try-out-the-rest-api",level:3},{value:"Set up KADAI Security",id:"set-up-kadai-security",level:2},{value:"Step 6: Add security dependencies and stop disabling security",id:"step-6-add-security-dependencies-and-stop-disabling-security",level:3},{value:"Step 7: Add BootWebSecurityConfigurer.java",id:"step-7-add-bootwebsecurityconfigurerjava",level:3},{value:"Step 8: Add ExampleWebSecurityConfig.java",id:"step-8-add-examplewebsecurityconfigjava",level:3},{value:"Step 9: Add users",id:"step-9-add-users",level:3},{value:"Step 10: Try out the REST-API",id:"step-10-try-out-the-rest-api",level:3},{value:"Set up KADAI UI",id:"set-up-kadai-ui",level:2},{value:"Step 11: Add web dependencies",id:"step-11-add-web-dependencies",level:3},{value:"Step 12: Add controllers",id:"step-12-add-controllers",level:3},{value:"Step 12a: Add <code>LoginController.java</code>",id:"step-12a-add-logincontrollerjava",level:4},{value:"Step 12b: Add ResourcesController.java",id:"step-12b-add-resourcescontrollerjava",level:4},{value:"Step 12c: Add ViewController.java",id:"step-12c-add-viewcontrollerjava",level:4},{value:"Step 13: Add WebMvcConfig.java",id:"step-13-add-webmvcconfigjava",level:3},{value:"Step 14: Start and open the application",id:"step-14-start-and-open-the-application",level:3}],c={toc:u};function g(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-spring-boot"},"Example Spring Boot"),(0,a.kt)("p",null,"In the first 4 steps, we will set up KADAI REST API without security. Then, we will show how to use\nthe resulting REST API with ",(0,a.kt)("a",{parentName:"p",href:"https://www.postman.com/"},"postman"),". This guide then sets up security.\nIn the end of the guide, we will add the UI."),(0,a.kt)("h2",{id:"what-youll-need"},"What you'll need"),(0,a.kt)("p",null,"In order to set up the example, please install:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"an IDE of your choice (preferably IntelliJ)"),(0,a.kt)("li",{parentName:"ul"},"Java 17"),(0,a.kt)("li",{parentName:"ul"},"maven"),(0,a.kt)("li",{parentName:"ul"},"optional: ",(0,a.kt)("a",{parentName:"li",href:"https://www.postman.com/"},"postman")," (makes REST API requests easier)")),(0,a.kt)("p",null,"Note: Please name your packages, folders and files exactly like in the example!"),(0,a.kt)("h2",{id:"set-up-kadai-rest-api-without-security"},"Set up KADAI REST-API without security"),(0,a.kt)("h3",{id:"step-1-initialize-an-empty-project"},"Step 1: Initialize an empty project"),(0,a.kt)("p",null,"Go to ",(0,a.kt)("a",{parentName:"p",href:"https://start.spring.io/"},"Spring Initializer"),' and create an example Maven Project. Choose the\nsame options as in the Screenshot, except the spring version. Please check Java 17, then click on "\nGenerate".'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"empty spring boot project",src:n(565).Z,width:"1908",height:"1061"})),(0,a.kt)("p",null,"Unpack the project in the folder of your choice and open it in IntelliJ"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"unpacked project",src:n(1596).Z,width:"1725",height:"775"})),(0,a.kt)("h3",{id:"step-2-add-dependencies"},"Step 2: Add dependencies"),(0,a.kt)("p",null,"Please add following dependencies to the pom. All dependencies can be copied as one block at the end\nof step 2. After adding the dependencies, please reload maven and recompile the project."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," 1. spring core depenpendency: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>org.springframework.plugin</groupId>\n    <artifactId>spring-plugin-core</artifactId>\n    <version>2.0.0.RELEASE</version>\n</dependency>\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," 2. database dependencies: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," 3. kadai dependencies: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-common-data</artifactId>\n    <version>8.1.0</version>\n</dependency>\n<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-common-logging</artifactId>\n    <version>8.1.0</version>\n</dependency>\n<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-rest-spring</artifactId>\n    <version>8.1.0</version>\n</dependency>\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," 4. tomcat application server dependency: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," All dependencies ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.plugin</groupId>\n    <artifactId>spring-plugin-core</artifactId>\n    <version>2.0.0.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-common-logging</artifactId>\n    <version>8.1.0</version>\n</dependency>\n<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-rest-spring</artifactId>\n    <version>8.1.0</version>\n</dependency>\n<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-common-data</artifactId>\n    <version>8.1.0</version>\n</dependency>\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n")),(0,a.kt)("h3",{id:"step-3-add-properties-configuration"},"Step 3: Add properties configuration"),(0,a.kt)("h4",{id:"step-3a-fill-out-applicationproperties"},"Step 3a: Fill out application.properties"),(0,a.kt)("p",null,"The example already has the configuration file ",(0,a.kt)("inlineCode",{parentName:"p"},"application.properties")," in\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/ressources")," folder. It's a standard configuration file used by spring. You can read\nmore about spring configuration in\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html"},"spring documentation"),".\nYou need to add following content into that file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"logging.level.io.kadai=INFO\nlogging.level.org.springframework=INFO\nserver.servlet.context-path=/kadai\nkadai.routing.dmn.upload.path=/tmp/routing.dmn\n######## Kadai DB #######\n######## h2 configuration ########\nspring.datasource.url=jdbc:h2:mem:kadai;NON_KEYWORDS=KEY,VALUE;IGNORECASE=TRUE;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=0\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=sa\nkadai.schemaName=KADAI\n######## h2 console configuration ########\n########spring.h2.console.enabled=true\n########spring.h2.console.path=/h2-console\n######## db2 configuration ########\n########spring.datasource.driverClassName=com.ibm.db2.jcc.DB2Driver\n########spring.datasource.url=jdbc:db2://localhost:5101/tskdb\n########spring.datasource.username=db2inst1\n########spring.datasource.password=db2inst1-pwd\n######## Postgres configuration ########\n########spring.datasource.url=jdbc:postgresql://localhost:5102/postgres\n########spring.datasource.driverClassName=org.postgresql.Driver\n########spring.datasource.username=postgres\n########spring.datasource.password=postgres\n######## ORACLE configuration ########\n########spring.datasource.url=jdbc:oracle:thin:@//localhost:5103/KADAI\n########spring.datasource.driverClassName=oracle.jdbc.OracleDriver\n########spring.datasource.username=TEST_USER\n########spring.datasource.password=testPassword\n########spring.jpa.generate-ddl=true\n########spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true\n####### property that control rest api security deploy use true for no security.\ndevMode=true\n# This property enables the support of XSRF tokens. This will not work together with devMode.\nenableCsrf=false\n####### property that control if the database is cleaned and sample data is generated\ngenerateSampleData=true\n####### cache static resources properties\nspring.web.resources.cache.cachecontrol.cache-private=true\n####### for upload of big workbasket- or classification-files\nspring.servlet.multipart.max-file-size=10MB\nspring.servlet.multipart.max-request-size=10MB\n####### serve compressed files for faster UI loading times\nserver.compression.enabled=true\nserver.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css,image/svg+xml\nserver.compression.min-response-size=10240\nspring.main.allow-bean-definition-overriding=true\nserver.tomcat.max-http-form-post-size=-1\nserver.tomcat.max-save-post-size=-1\nserver.tomcat.max-swallow-size=-1\n####### tomcat is not detecting the x-forward headers from bluemix as a trustworthy proxy\nserver.tomcat.remoteip.internal-proxies=.*\nserver.forward-headers-strategy=native\n####### Properties for AccessIdController to connect to LDAP\nkadai.ldap.serverUrl=ldap://localhost:10389\nkadai.ldap.bindDn=uid=admin\nkadai.ldap.bindPassword=secret\nkadai.ldap.baseDn=ou=Test,O=KADAI\nkadai.ldap.userSearchBase=cn=users\nkadai.ldap.userSearchFilterName=objectclass\nkadai.ldap.userSearchFilterValue=person\nkadai.ldap.userFirstnameAttribute=givenName\nkadai.ldap.userLastnameAttribute=sn\nkadai.ldap.userFullnameAttribute=cn\nkadai.ldap.userPhoneAttribute=phoneNumber\nkadai.ldap.userMobilePhoneAttribute=mobileNumber\nkadai.ldap.userEmailAttribute=email\nkadai.ldap.userOrglevel1Attribute=orgLevel1\nkadai.ldap.userOrglevel2Attribute=orgLevel2\nkadai.ldap.userOrglevel3Attribute=someDepartement\nkadai.ldap.userOrglevel4Attribute=orgLevel4\nkadai.ldap.userIdAttribute=uid\nkadai.ldap.userMemberOfGroupAttribute=memberOf\nkadai.ldap.userPermissionsAttribute=permission\nkadai.ldap.groupSearchBase=\nkadai.ldap.groupSearchFilterName=objectclass\nkadai.ldap.groupSearchFilterValue=groupofuniquenames\nkadai.ldap.groupNameAttribute=cn\nkadai.ldap.minSearchForLength=3\nkadai.ldap.maxNumberOfReturnedAccessIds=50\nkadai.ldap.groupsOfUser=uniquemember\n# Embedded Spring LDAP server\nspring.ldap.embedded.base-dn=OU=Test,O=KADAI\nspring.ldap.embedded.credential.username=uid=admin\nspring.ldap.embedded.credential.password=secret\nspring.ldap.embedded.ldif=classpath:example-users.ldif\nspring.ldap.embedded.port=10389\nspring.ldap.embedded.validation.enabled=false\n")),(0,a.kt)("h4",{id:"step-3b-add-kadaiproperties"},"Step 3b: Add kadai.properties"),(0,a.kt)("p",null,"Create ",(0,a.kt)("inlineCode",{parentName:"p"},"kadai.properties")," in the resources folder. This file contains kadai specific\nconfiguration, like custom holidays etc.. Please\ncopy following content into ",(0,a.kt)("inlineCode",{parentName:"p"},"kadai.properties"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kadai.roles.user=cn=ksc-users,cn=groups,OU=Test,O=KADAI | teamlead-1 | teamlead-2 | user-1-1 | user-1-2 | user-2-1 | user-2-2 | user-b-1 | user-b-2\nkadai.roles.admin=admin | uid=admin,cn=users,OU=Test,O=KADAI\nkadai.roles.business_admin=businessadmin | cn=business-admins,cn=groups,OU=Test,O=KADAI\nkadai.roles.monitor=monitor | cn=monitor-users,cn=groups,OU=Test,O=KADAI\nkadai.roles.task_admin=taskadmin\nkadai.domains=DOMAIN_A|DOMAIN_B|DOMAIN_C|DOMAIN_TEST\nkadai.user.minimalPermissionsToAssignDomains=READ | OPEN\nkadai.classification.types=TASK|DOCUMENT\nkadai.classification.categories.task=EXTERNAL| manual| autoMAtic| Process\nkadai.classification.categories.document=EXTERNAL\nkadai.jobs.maxRetries=3\nkadai.jobs.batchSize=50\nkadai.jobs.runEvery=P1D\nkadai.jobs.firstRunAt=2018-07-25T08:00:00Z\nkadai.jobs.cleanup.task.minimumAge=P14D\nkadai.jobs.cleanup.history.simple.batchSize=50\nkadai.jobs.history.cleanup.firstRunAt=2018-07-25T08:00:00Z\nkadai.jobs.cleanup.history.simple.minimumAge=P14D\nkadai.jobs.history.cleanup.runEvery=P1D\nkadai.jobs.refresh.user.runEvery=P1D\nkadai.jobs.refresh.user.firstRunAt=2018-07-25T23:00:00Z\nkadai.workingTime.holidays.german.enabled=true\nkadai.workingTime.holidays.german.corpus-christi.enabled=true\nkadai.history.logger.name=AUDIT\nkadai.routing.dmn=/dmn-table.dmn\n# enable or disable the jobscheduler at all\n# set it to false and no jobs are running\nkadai.jobs.scheduler.enabled=false\n# wait time before the first job run in millis\nkadai.jobs.scheduler.initialStartDelay=100\n# sleeping time befor the next job runs\nkadai.jobs.scheduler.period=12\n# timeunit for the sleeping period\n# Possible values: MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS\nkadai.jobs.scheduler.periodTimeUnit=HOURS\nkadai.jobs.cleanup.task.enable=true\nkadai.jobs.priority.task.enable=true\nkadai.jobs.cleanup.workbasket.enable=true\nkadai.jobs.refresh.user.enable=true\nkadai.jobs.cleanup.history.simple.enable=false\n")),(0,a.kt)("h3",{id:"step-4-add-rest-configuration"},"Step 4: Add rest configuration"),(0,a.kt)("p",null,"First, Add ",(0,a.kt)("inlineCode",{parentName:"p"},'@ComponentScan({"io.kadai","com.example"})')," as annotation above the class\ndefinition of the ExampleApplication and a corresponding import to this class. This will allow the\napllication to find needed components."),(0,a.kt)("p",null,"Then, create a java class with the name ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleRestConfiguration")," in the com.example.demo\npackage. This class defines the Beans and their dependencies. Your project structure should look\nlike this:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"basic project",src:n(5554).Z,width:"344",height:"601"})),(0,a.kt)("p",null,"Copy following content into ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleRestConfiguration.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo;\n\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.h2.tools.Server;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport io.kadai.KadaiConfiguration;\nimport io.kadai.common.api.KadaiEngine;\nimport io.kadai.common.internal.configuration.DbSchemaCreator;\nimport io.kadai.sampledata.SampleDataGenerator;\n\n@Configuration\npublic class ExampleRestConfiguration {\n\n  @Bean\n  public PlatformTransactionManager txManager(DataSource dataSource) {\n    return new DataSourceTransactionManager(dataSource);\n  }\n\n  @Bean\n  @DependsOn("kadaiConfiguration") // generate sample data after schema was inserted\n  public SampleDataGenerator generateSampleData(\n      KadaiConfiguration kadaiConfiguration,\n      DataSource dataSource,\n      @Value("${generateSampleData:true}") boolean generateSampleData)\n      throws SQLException {\n    DbSchemaCreator dbSchemaCreator =\n        new DbSchemaCreator(dataSource, kadaiConfiguration.getSchemaName());\n    dbSchemaCreator.run();\n    SampleDataGenerator sampleDataGenerator =\n        new SampleDataGenerator(dataSource, kadaiConfiguration.getSchemaName());\n    if (generateSampleData) {\n      sampleDataGenerator.generateSampleData();\n    }\n    return sampleDataGenerator;\n  }\n\n  @Bean\n  @DependsOn("generateSampleData")\n  public KadaiEngine getKadaiEngine(KadaiConfiguration kadaiConfiguration)\n      throws SQLException {\n    return KadaiEngine.buildKadaiEngine(kadaiConfiguration);\n  }\n\n  // only required to let the adapter example connect to the same database\n  @Bean(initMethod = "start", destroyMethod = "stop")\n  public Server inMemoryH2DatabaseaServer() throws SQLException {\n    return Server.createTcpServer("-tcp", "-tcpAllowOthers", "-tcpPort", "9095");\n  }\n  \n  @Bean\n  @ConditionalOnMissingBean(KadaiConfiguration.class)\n  public KadaiConfiguration kadaiConfiguration(\n      DataSource dataSource,\n      @Qualifier("kadaiPropertiesFileName") String propertiesFileName,\n      @Qualifier("kadaiPropertiesDelimiter") String delimiter) {\n    return new KadaiConfiguration.Builder(dataSource, true, "KADAI")\n        .initKadaiProperties(propertiesFileName, delimiter)\n        .build();\n  }\n}\n\n\n')),(0,a.kt)("h3",{id:"step-5-try-out-the-rest-api"},"Step 5: Try out the REST-API"),(0,a.kt)("p",null,"Recompile the project and then start the DemoApplication in your IDE. You can now make following\nrequest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET http://localhost:8080/kadai/api/v1/classifications\n")),(0,a.kt)("p",null,"You should get a list of different Classifications in the body of the response. Here is a screenshot\nof the request and the response in ",(0,a.kt)("a",{parentName:"p",href:"https://www.postman.com/"},"postman"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"example request",src:n(8118).Z,width:"1410",height:"925"})),(0,a.kt)("p",null,"You can also request Tasks using following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET http://localhost:8080/kadai/api/v1/tasks\n")),(0,a.kt)("p",null,"At this point, full KADAI REST-API functionality is available without security or authorization.\nThey will be added in the next steps."),(0,a.kt)("h2",{id:"set-up-kadai-security"},"Set up KADAI Security"),(0,a.kt)("p",null,"Our example application uses ",(0,a.kt)("a",{parentName:"p",href:"https://ldap.com/learn-about-ldap/"},"ldap")," for its authorization.\nFirst, add a ",(0,a.kt)("inlineCode",{parentName:"p"},"security")," package into the ",(0,a.kt)("inlineCode",{parentName:"p"},"com.example.demo")," package (in\nsrc/main/java/com/example/demo). The package will consist of one configurer class:\nBootWebSecurityConfigurer (will be replaced), and one example configuration\nExampleWebSecurityConfig. The classes will be created in the next steps."),(0,a.kt)("h3",{id:"step-6-add-security-dependencies-and-stop-disabling-security"},"Step 6: Add security dependencies and stop disabling security"),(0,a.kt)("p",null,"Add following dependencies to your pom and reload maven:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>org.springframework.ldap</groupId>\n    <artifactId>spring-ldap-core</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-ldap</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.unboundid</groupId>\n    <artifactId>unboundid-ldapsdk</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n")),(0,a.kt)("p",null,"Then, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"devMode")," property in ",(0,a.kt)("inlineCode",{parentName:"p"},"application.properties")," to false. This enables\nauthorization checks.\nYou also need to remove following lines from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleRestConfiguration.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},' @Bean\n@ConditionalOnMissingBean(KadaiConfiguration.class)\npublic KadaiConfiguration kadaiConfiguration(\n    DataSource dataSource,\n    @Qualifier("kadaiPropertiesFileName") String propertiesFileName,\n    @Qualifier("kadaiPropertiesDelimiter") String delimiter) {\n  return new KadaiConfiguration.Builder(dataSource, true, "KADAI")\n      .initKadaiProperties(propertiesFileName, delimiter)\n      .build();\n}\n')),(0,a.kt)("p",null,"This way, you don't disable security manually.\nDeleted because KadaiEngineConfiguration doesn't exist anymore"),(0,a.kt)("h3",{id:"step-7-add-bootwebsecurityconfigurerjava"},"Step 7: Add BootWebSecurityConfigurer.java"),(0,a.kt)("p",null,"Create ",(0,a.kt)("inlineCode",{parentName:"p"},"BootWebSecurityConfigurer.java")," in the security folder and copy following content into\nit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo.security;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.ldap.core.support.BaseLdapPathContextSource;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\nimport org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer;\nimport org.springframework.security.config.ldap.LdapPasswordComparisonAuthenticationManagerFactory;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\nimport org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.ldap.DefaultSpringSecurityContextSource;\nimport org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator;\nimport org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport io.kadai.common.rest.SpringSecurityToJaasFilter;\n\n/** Default basic configuration for kadai web example. */\n@Configuration\npublic class BootWebSecurityConfigurer {\n\n  private final String ldapServerUrl;\n  private final String ldapBaseDn;\n  private final String ldapUserDnPatterns;\n  private final String ldapGroupSearchBase;\n  private final String ldapGroupSearchFilter;\n\n  private final boolean devMode;\n  private final boolean enableCsrf;\n\n  public BootWebSecurityConfigurer(\n      @Value("${kadai.ldap.serverUrl:ldap://localhost:10389}") String ldapServerUrl,\n      @Value("${kadai.ldap.baseDn:OU=Test,O=KADAI}") String ldapBaseDn,\n      @Value("${kadai.ldap.userDnPatterns:uid={0},cn=users}") String ldapUserDnPatterns,\n      @Value("${kadai.ldap.groupSearchBase:cn=groups}") String ldapGroupSearchBase,\n      @Value("${kadai.ldap.groupSearchFilter:uniqueMember={0}}") String ldapGroupSearchFilter,\n      @Value("${enableCsrf:false}") boolean enableCsrf,\n      @Value("${devMode:false}") boolean devMode) {\n    this.enableCsrf = enableCsrf;\n    this.ldapServerUrl = ldapServerUrl;\n    this.ldapBaseDn = ldapBaseDn;\n    this.ldapGroupSearchBase = ldapGroupSearchBase;\n    this.ldapGroupSearchFilter = ldapGroupSearchFilter;\n    this.ldapUserDnPatterns = ldapUserDnPatterns;\n    this.devMode = devMode;\n  }\n\n  @Bean\n  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    http.authorizeHttpRequests(\n            authorizeHttpRequests ->\n                authorizeHttpRequests\n                    .requestMatchers("/css/**", "/img/**")\n                    .permitAll()\n                    .requestMatchers(HttpMethod.GET, "/docs/**")\n                    .permitAll())\n        .cors(Customizer.withDefaults())\n        .addFilter(jaasApiIntegrationFilter())\n        .addFilterAfter(new SpringSecurityToJaasFilter(), JaasApiIntegrationFilter.class);\n\n    if (enableCsrf) {\n      CookieCsrfTokenRepository csrfTokenRepository = CookieCsrfTokenRepository.withHttpOnlyFalse();\n      csrfTokenRepository.setCookiePath("/");\n      http.csrf(\n              csrf ->\n                  csrf.csrfTokenRepository(csrfTokenRepository)\n                      .csrfTokenRequestHandler(new SpaCsrfTokenRequestHandler()))\n          .addFilterAfter(new CsrfCookieFilter(), SpringSecurityToJaasFilter.class);\n    } else {\n      http.csrf(AbstractHttpConfigurer::disable).httpBasic(Customizer.withDefaults());\n    }\n\n    if (devMode) {\n      http.headers(\n              headers -> headers.frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin))\n          .authorizeHttpRequests(\n              authorizeHttpRequests ->\n                  authorizeHttpRequests\n                      .requestMatchers("/h2-console/**")\n                      .permitAll()\n                      .anyRequest()\n                      .fullyAuthenticated())\n          .logout(logout -> logout.logoutSuccessUrl("http://localhost:4200/#").permitAll());\n    } else {\n      addLoginPageConfiguration(http);\n    }\n    http.requestCache(RequestCacheConfigurer::disable);\n    return http.build();\n  }\n\n  protected void addLoginPageConfiguration(HttpSecurity http) throws Exception {\n    http.authorizeHttpRequests(\n            authorizeHttpRequests -> authorizeHttpRequests.anyRequest().fullyAuthenticated())\n        .formLogin(\n            formLogin ->\n                formLogin\n                    .loginPage("/login")\n                    .failureUrl("/login?error")\n                    .defaultSuccessUrl("/index.html")\n                    .permitAll())\n        .logout(\n            logout ->\n                logout\n                    .invalidateHttpSession(true)\n                    .clearAuthentication(true)\n                    .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))\n                    .logoutSuccessUrl("/login?logout")\n                    .deleteCookies("JSESSIONID")\n                    .permitAll());\n  }\n\n  @Bean\n  public LdapAuthoritiesPopulator authoritiesPopulator(\n      DefaultSpringSecurityContextSource contextSource) {\n    Function<Map<String, List<String>>, GrantedAuthority> authorityMapper =\n        recordVar -> new SimpleGrantedAuthority(recordVar.get("spring.security.ldap.dn").get(0));\n\n    DefaultLdapAuthoritiesPopulator populator =\n        new DefaultLdapAuthoritiesPopulator(contextSource, ldapGroupSearchBase);\n    populator.setGroupSearchFilter(ldapGroupSearchFilter);\n    populator.setSearchSubtree(true);\n    populator.setRolePrefix("");\n    populator.setAuthorityMapper(authorityMapper);\n    return populator;\n  }\n\n  @Bean\n  @Primary\n  public DefaultSpringSecurityContextSource defaultSpringSecurityContextSource() {\n    return new DefaultSpringSecurityContextSource(ldapServerUrl + "/" + ldapBaseDn);\n  }\n\n  @Bean\n  public GrantedAuthoritiesMapper grantedAuthoritiesMapper() {\n    SimpleAuthorityMapper grantedAuthoritiesMapper = new SimpleAuthorityMapper();\n    grantedAuthoritiesMapper.setPrefix("");\n    return grantedAuthoritiesMapper;\n  }\n\n  protected JaasApiIntegrationFilter jaasApiIntegrationFilter() {\n    JaasApiIntegrationFilter filter = new JaasApiIntegrationFilter();\n    filter.setCreateEmptySubject(true);\n    return filter;\n  }\n\n  @Bean\n  AuthenticationManager ldapAuthenticationManager(\n      BaseLdapPathContextSource contextSource, LdapAuthoritiesPopulator authorities) {\n    @SuppressWarnings("deprecation")\n    LdapPasswordComparisonAuthenticationManagerFactory factory =\n        new LdapPasswordComparisonAuthenticationManagerFactory(\n            contextSource, NoOpPasswordEncoder.getInstance());\n    factory.setUserDnPatterns(ldapUserDnPatterns);\n    factory.setLdapAuthoritiesPopulator(authorities);\n    factory.setAuthoritiesMapper(grantedAuthoritiesMapper());\n    factory.setPasswordAttribute("userPassword");\n    return factory.createAuthenticationManager();\n  }\n}\n\n')),(0,a.kt)("p",null,"Create ",(0,a.kt)("inlineCode",{parentName:"p"},"CsrfCookieFilter.java")," in the security folder and copy following content into it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport org.springframework.security.web.csrf.CsrfToken;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nfinal class CsrfCookieFilter extends OncePerRequestFilter {\n\n  @Override\n  protected void doFilterInternal(\n      HttpServletRequest request,\n      @SuppressWarnings("NullableProblems") HttpServletResponse response,\n      FilterChain filterChain)\n      throws ServletException, IOException {\n    CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");\n    // Render the token value to a cookie by causing the deferred token to be loaded\n    csrfToken.getToken();\n\n    filterChain.doFilter(request, response);\n  }\n}\n\n')),(0,a.kt)("p",null,"Lastly, create ",(0,a.kt)("inlineCode",{parentName:"p"},"SpaCsrfTokenRequestHandler.java")," in the security folder and copy following content into it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"package com.example.demo.security;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport java.util.function.Supplier;\nimport org.springframework.security.web.csrf.CsrfToken;\nimport org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;\nimport org.springframework.security.web.csrf.CsrfTokenRequestHandler;\nimport org.springframework.security.web.csrf.XorCsrfTokenRequestAttributeHandler;\nimport org.springframework.util.StringUtils;\n\nfinal class SpaCsrfTokenRequestHandler extends CsrfTokenRequestAttributeHandler {\n  private final CsrfTokenRequestHandler delegate = new XorCsrfTokenRequestAttributeHandler();\n\n  @Override\n  public void handle(\n      HttpServletRequest request, HttpServletResponse response, Supplier<CsrfToken> csrfToken) {\n    /*\n     * Always use XorCsrfTokenRequestAttributeHandler to provide BREACH protection of\n     * the CsrfToken when it is rendered in the response body.\n     */\n    this.delegate.handle(request, response, csrfToken);\n  }\n\n  @Override\n  public String resolveCsrfTokenValue(HttpServletRequest request, CsrfToken csrfToken) {\n    /*\n     * If the request contains a request header, use CsrfTokenRequestAttributeHandler\n     * to resolve the CsrfToken. This applies when a single-page application includes\n     * the header value automatically, which was obtained via a cookie containing the\n     * raw CsrfToken.\n     */\n    if (StringUtils.hasText(request.getHeader(csrfToken.getHeaderName()))) {\n      return super.resolveCsrfTokenValue(request, csrfToken);\n    }\n    /*\n     * In all other cases (e.g. if the request contains a request parameter), use\n     * XorCsrfTokenRequestAttributeHandler to resolve the CsrfToken. This applies\n     * when a server-side rendered form includes the _csrf request parameter as a\n     * hidden input.\n     */\n    return this.delegate.resolveCsrfTokenValue(request, csrfToken);\n  }\n}\n\n")),(0,a.kt)("h3",{id:"step-8-add-examplewebsecurityconfigjava"},"Step 8: Add ExampleWebSecurityConfig.java"),(0,a.kt)("p",null,"ExampleWebSecurityConfig specifies beans that are used for authorization by spring.\nCreate ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleWebSecurityConfig.java")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"security")," package and copy following content\nthere:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class ExampleWebSecurityConfig {\n\n  @Bean\n  public CorsConfigurationSource corsConfigurationSource() {\n    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    CorsConfiguration config = new CorsConfiguration();\n    config.setAllowCredentials(true);\n    config.addAllowedOriginPattern("*");\n    config.addAllowedHeader("*");\n    config.addAllowedMethod("*");\n    source.registerCorsConfiguration("/**", config);\n    return source;\n  }\n}\n')),(0,a.kt)("h3",{id:"step-9-add-users"},"Step 9: Add users"),(0,a.kt)("p",null,"In order for security to work, we need to define ldap users. Please download\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"example-users.ldif")," file here:"),(0,a.kt)("div",{className:o.Z.buttons},(0,a.kt)(i.Z,{className:"button button--secondary button--lg",mdxType:"Link"},(0,a.kt)("a",{className:"button button--secondary button--lg",href:n(6169).Z,download:!0,target:"_blank"},"Download example users "))),(0,a.kt)("br",null),(0,a.kt)("p",null,"Please unzip the ",(0,a.kt)("inlineCode",{parentName:"p"},"example-users")," file and put it into the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," folder."),(0,a.kt)("p",null,"Your project structure should now look like this:\n",(0,a.kt)("img",{alt:"project structure",src:n(9887).Z,width:"355",height:"633"})),(0,a.kt)("h3",{id:"step-10-try-out-the-rest-api"},"Step 10: Try out the REST-API"),(0,a.kt)("p",null,"First, restart the ExampleApplication. Try to make a request like in the previous step, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET http://localhost:8080/kadai/api/v1/tasks\n")),(0,a.kt)("p",null,"You should get the 401 Unauthorized response. Now, you can authorize yourself using basicAuth.\nIn ",(0,a.kt)("a",{parentName:"p",href:"https://www.postman.com/"},"postman"),', go to the "Authorization" tab. There, select basicAuth and\ntype "admin" as user and "admin" as password. Then, you can make the following request:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET http://localhost:8080/kadai/api/v1/tasks\n")),(0,a.kt)("p",null,"It should return a list of Tasks in the response body. Here is a screenshot of the request and the\nresponse in ",(0,a.kt)("a",{parentName:"p",href:"https://www.postman.com/"},"postman"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"example request",src:n(657).Z,width:"1395",height:"927"})),(0,a.kt)("h2",{id:"set-up-kadai-ui"},"Set up KADAI UI"),(0,a.kt)("h3",{id:"step-11-add-web-dependencies"},"Step 11: Add web dependencies"),(0,a.kt)("p",null,"Add following dependencies to your pom and reload maven:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>io.kadai</groupId>\n    <artifactId>kadai-web</artifactId>\n    <version>8.1.0</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n")),(0,a.kt)("h3",{id:"step-12-add-controllers"},"Step 12: Add controllers"),(0,a.kt)("p",null,"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"controllers")," package into the ",(0,a.kt)("inlineCode",{parentName:"p"},"com.example.demo")," package (in\nsrc/main/java/com/example/demo). This package will contain the controllers for different paths. Our\napplication needs following three controllers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"LoginController"),(0,a.kt)("li",{parentName:"ul"},"ResourcesController"),(0,a.kt)("li",{parentName:"ul"},"ViewController")),(0,a.kt)("p",null,"These will be added in the steps 12a, 12b and 12c."),(0,a.kt)("h4",{id:"step-12a-add-logincontrollerjava"},"Step 12a: Add ",(0,a.kt)("inlineCode",{parentName:"h4"},"LoginController.java")),(0,a.kt)("p",null,"The LoginController will handle the login into kadai. It will need the ",(0,a.kt)("inlineCode",{parentName:"p"},"templates/login.html"),"\nin the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," folder. You can download the templates folder here:"),(0,a.kt)("div",{className:o.Z.buttons},(0,a.kt)(i.Z,{className:"button button--secondary button--lg",mdxType:"Link"},(0,a.kt)("a",{className:"button button--secondary button--lg",href:n(2516).Z,download:!0,target:"_blank"},"Download templates "))),(0,a.kt)("p",null,"Please unzip the ",(0,a.kt)("inlineCode",{parentName:"p"},"templates")," folder and put it into the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," folder. Then, copy\nfollowing code into ",(0,a.kt)("inlineCode",{parentName:"p"},"LoginController.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo.controllers;\n\nimport org.springframework.core.Ordered;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Controller\npublic class LoginController implements WebMvcConfigurer {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n        registry.addViewController("/login").setViewName("login");\n        registry.setOrder(Ordered.HIGHEST_PRECEDENCE);\n    }\n}\n')),(0,a.kt)("h4",{id:"step-12b-add-resourcescontrollerjava"},"Step 12b: Add ResourcesController.java"),(0,a.kt)("p",null,"The ResourcesController handles resources like images and additional customizations. You'll need\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," folder for it. You can download the ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," folder here:"),(0,a.kt)("div",{className:o.Z.buttons},(0,a.kt)(i.Z,{className:"button button--secondary button--lg",mdxType:"Link"},(0,a.kt)("a",{className:"button button--secondary button--lg",href:n(7348).Z,download:!0,target:"_blank"},"Download static ")))," ",(0,a.kt)("br",null),(0,a.kt)("p",null,"Please unzip the ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," folder and copy it into ",(0,a.kt)("inlineCode",{parentName:"p"},"resources"),". Additionaly, there is\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"com.example.demo.controllers")," folder for further customizations. Please downlad it here:"),(0,a.kt)("div",{className:o.Z.buttons},(0,a.kt)(i.Z,{className:"button button--secondary button--lg",mdxType:"Link"},(0,a.kt)("a",{className:"button button--secondary button--lg",href:n(2376).Z,download:!0,target:"_blank"},"Download controllers "))),(0,a.kt)("br",null),(0,a.kt)("p",null,"Unzip the ",(0,a.kt)("inlineCode",{parentName:"p"},"com")," folder and put it into ",(0,a.kt)("inlineCode",{parentName:"p"},"resources"),". Then, please copy following code\ninto ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourcesController.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo.controllers;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport io.kadai.common.internal.util.ResourceUtil;\n\nimport java.io.IOException;\n\n@Controller\npublic class ResourcesController {\n\n    public static final String KADAI_CUSTOMIZATION_FILE_NAME = "kadai-customization.json";\n\n    @GetMapping(\n            value = "/environments/data-sources/kadai-customization.json",\n            produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<String> kadaiCustomization() throws IOException {\n        return ResponseEntity.ok(readResourceAsString(KADAI_CUSTOMIZATION_FILE_NAME));\n    }\n\n    // the environment-information.json file will be served via "static" folder\n    //  @GetMapping(\n    //      value = "/environments/data-sources/environment-information.json",\n    //      produces = MediaType.APPLICATION_JSON_VALUE)\n    //  public ResponseEntity<String> environmentInformation() throws Exception {\n    //    return ResponseEntity.ok(readResourceAsString("environment-information.json"));\n    //  }\n\n    private String readResourceAsString(String resource) throws IOException {\n        String resourceAsString = ResourceUtil.readResourceAsString(getClass(), resource);\n        if (resourceAsString == null) {\n            return "{}";\n        }\n        return resourceAsString;\n    }\n}\n')),(0,a.kt)("h4",{id:"step-12c-add-viewcontrollerjava"},"Step 12c: Add ViewController.java"),(0,a.kt)("p",null,"The ViewController manages the root view of kadai. Copy following code\ninto ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewController.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo.controllers;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/** The view controller. */\n@Controller\npublic class ViewController {\n\n    @GetMapping(path = {"", "kadai/**"})\n    public String index() {\n        return "forward:/index.html";\n    }\n}\n')),(0,a.kt)("h3",{id:"step-13-add-webmvcconfigjava"},"Step 13: Add WebMvcConfig.java"),(0,a.kt)("p",null,"Create ",(0,a.kt)("inlineCode",{parentName:"p"},"WebMvcConfig.java")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"com.example.demo")," package. It handles resources and\nmessages of the application. Copy following content into ",(0,a.kt)("inlineCode",{parentName:"p"},"WebMvcConfig.java"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package com.example.demo;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport jakarta.annotation.PostConstruct;\nimport java.util.List;\n\n/**\n * The Web MVC Configuration.\n */\n@Configuration\n@EnableWebMvc\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {\n            "classpath:/META-INF/resources/", "classpath:/resources/",\n            "classpath:/static/", "classpath:/public/", "classpath:/templates/"\n    };\n\n    private final ObjectMapper objectMapper;\n\n    @Autowired\n    public WebMvcConfig(ObjectMapper objectMapper) {\n        this.objectMapper = objectMapper;\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        if (!registry.hasMappingForPattern("/webjars/**")) {\n            registry\n                    .addResourceHandler("/webjars/**")\n                    .addResourceLocations("classpath:/META-INF/resources/webjars/");\n        }\n        if (!registry.hasMappingForPattern("/**")) {\n            registry.addResourceHandler("/**").addResourceLocations(CLASSPATH_RESOURCE_LOCATIONS);\n        }\n    }\n\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        for (HttpMessageConverter<?> converter : converters) {\n            if (converter instanceof MappingJackson2HttpMessageConverter) {\n                MappingJackson2HttpMessageConverter jacksonConverter =\n                        (MappingJackson2HttpMessageConverter) converter;\n                jacksonConverter.setPrettyPrint(true);\n            }\n        }\n    }\n\n    @PostConstruct\n    public void enableObjectIndent() {\n        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);\n    }\n}\n\n')),(0,a.kt)("p",null,"Your project structure should look like this:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"project structure",src:n(1399).Z,width:"351",height:"842"})),(0,a.kt)("h3",{id:"step-14-start-and-open-the-application"},"Step 14: Start and open the application"),(0,a.kt)("p",null,"Recompile the application, then go to the DemoApplication class in the IDE and start it. Then\ntype ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8080/kadai")," into your browser. You should see the login screen:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Log in",src:n(2200).Z,width:"1820",height:"976"})),(0,a.kt)("p",null,'Log in using "admin" as username and "admin" as password. Now, you should see following:'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Workbaskets",src:n(909).Z,width:"1916",height:"1102"})),(0,a.kt)("p",null,"Press the menu button in the upper left to navigate."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Navigate",src:n(4778).Z,width:"1907",height:"1096"})))}g.isMDXComponent=!0},2376:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/com-0f07a8bf0277901135aeeda167b5a7ce.zip"},6169:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/example-users-59b3afc8ac24bc03947b63568201a681.zip"},7348:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/static-b5a210389c4f7556535cbd797a333654.zip"},2516:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/templates-63e01163241f7b3e4c22ff63263214df.zip"},933:(e,t,n)=>{n.d(t,{Z:()=>r});const r={features:"features_t9lD",featureSvg:"featureSvg_GfXr",featureText:"featureText_ZxAV"}},8118:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/example-request-classifications-0eca365b18b2aa2f059fa8cd18718b86.png"},2200:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/login-38e1c948b583faba6c0a0449230bf7b5.png"},4778:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/navigate-d9073ffe5f925daee48a253620cba56d.png"},565:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/project-initializer-36766e23926e9de9544f809c236ec969.png"},1399:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/project-structure-end-a0f0c7c318c8d3e2810f1bb7b165f5f3.png"},9887:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/project-structure-security-9607aaae9482804b3fd2e9f797362df1.png"},657:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/request-security-ea37ce040aec51b3b2eaf6698888e0d0.png"},5554:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/rest-api-project-a58e3752764d48e32eedd577c97f099a.png"},1596:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/schritt-2-471abd42fb0e963330579ad3675bd6a5.png"},909:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/workbaskets-cb8ebbc84c5dfb0d8940e7f33cebf264.png"}}]);